{"version":3,"sources":["components/Styled.js","components/Navs.js","components/Title.js","components/MainPageLayout.js","components/anime/AnimeCard.styled.js","components/anime/AnimeCard.js","custom-hooks.js","components/anime/AnimeGrid.js","components/manga/MangaCard.styled.js","components/manga/MangaCard.js","components/manga/MangaGrid.js","config.js","pages/Home.js","pages/Starred.js","pages/ErrorPage.js","components/MainData.styled.js","components/MainData.js","components/StyledDetail.js","components/Details.js","pages/Details.styled.js","pages/ResourceDetail.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["FlexGrid","styled","div","SearchCard","StyledLink","Link","Links","to","text","Navs","location","useLocation","className","map","link","pathname","Title","title","subtitle","MainPageLayout","children","StyledAnimeCard","AnimeCard","image","id","description","toggleStar","isStarred","eng","jpn","shortDesc","split","slice","join","src","alt","type","onClick","stateReducer","prevState","action","data","resourceID","val","filter","usePersistedReducer","reducer","initialState","key","useReducer","initial","stored","localStorage","getItem","JSON","parse","state","dispatch","useEffect","setItem","stringify","useStarred","AnimeGrid","starredShows","dispatchStarred","item","find","element","attributes","titles","en_jp","ja_jp","posterImage","small","StyledMangaCard","MangaCard","MangaGrid","getApiResult","queryString","a","fetch","then","res","json","response","Home","useState","lastInput","sessionStorage","input","setInput","newInput","usePersistedQuery","results","setResults","srchOpt","setSrchOpt","isAnimeOpted","search","result","radioChange","ev","target","value","placeholder","onChange","onKeyDown","keyCode","htmlFor","checked","length","Starred","starred","starredList","setStarredList","isLoading","setIsLoading","error","setError","promises","Promise","all","apidata","spread","catch","err","ErrorPage","MainDataWrapper","Headline","MainData","DetailsWrapper","TagList","Details","rating","count","status","genreString","ctg","genre","setGenre","isMounted","name","href","rel","ShowPageWrapper","InfoBlock","details","AnimeDetail","category","params","useParams","message","averageRating","episodeCount","volumeCount","App","exact","path","ResourceDetail","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.05e2e73d.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const FlexGrid = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\n\nexport const SearchCard = styled.div`\n  width: 200px;\n  height: 100%;\n  margin: 0 15px 40px;\n\n  .img-wrapper {\n    width: 100%;\n    border-radius: 10px;\n    height: 300px;\n    overflow: hidden;\n    border: 1px solid #ddd;\n\n    img {\n      object-fit: cover;\n      height: 100%;\n      width: 100%;\n    }\n  }\n\n  h4 {\n    margin: 10px 0;\n    font-size: 21px;\n  }\n\n  p {\n    margin: 0;\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  margin: 0 10px;\n  padding: 3px 15px;\n  position: relative;\n  text-decoration: none;\n  color: grey;\n  &.active {\n    color: blue;\n    &:after {\n      content: '';\n      position: absolute;\n      display: block;\n      height: 2px;\n      left: 0%;\n      bottom: 0;\n      background-color: blue;\n      animation: slide-in 0.3s ease-in forwards;\n      @keyframes slide-in {\n        from {\n          left: 50%;\n          width: 0;\n        }\n        to {\n          left: 0%;\n          width: 100%;\n        }\n      }\n    }\n  }\n`;\n","/* eslint-disable arrow-body-style */\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { StyledLink } from './Styled';\n\nconst Links = [\n  { to: '/', text: 'Home' },\n  { to: '/Starred', text: 'Starred' },\n];\n\nconst Navs = () => {\n  const location = useLocation();\n  // console.log(location);\n\n  return (\n    <div>\n      <ul className=\"nav-list\">\n        {Links.map(link => {\n          return (\n            <li key={link.to}>\n              <StyledLink\n                className={location.pathname === link.to ? 'active' : ''}\n                to={link.to}\n              >\n                {link.text}\n              </StyledLink>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Navs;\n","import React from 'react';\n\nconst Title = ({ title, subtitle }) => {\n  return (\n    <div className=\"title\">\n      <h1>{title}</h1>\n      <p>{subtitle}</p>\n    </div>\n  );\n};\n\nexport default Title;\n","import React from 'react';\nimport Navs from './Navs';\nimport Title from './Title';\n\nconst MainPageLayout = ({ children }) => {\n  return (\n    <div>\n      <Title\n        title=\"Anime Hub\"\n        subtitle=\"Platform to discover Animes and Mangas \"\n      />\n      <Navs />\n      {children}\n    </div>\n  );\n};\nexport default MainPageLayout;\n","import styled from 'styled-components';\nimport { SearchCard } from '../Styled';\n\nexport const StyledAnimeCard = styled(SearchCard)`\n  .btns {\n    margin-top: 15px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    a {\n      text-decoration-color: #000;\n      color: #000;\n      &:hover {\n        text-decoration-color: blue;\n        color: blue;\n      }\n    }\n    button {\n      outline: none;\n      border: 1px solid #8e8e8e;\n      border-radius: 15px;\n      padding: 5px 20px;\n      background-color: #fff;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      &:hover {\n        cursor: pointer;\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { StyledAnimeCard } from './AnimeCard.styled';\n\nconst AnimeCard = ({\n  title,\n  image,\n  id,\n  description,\n  toggleStar,\n  isStarred,\n}) => {\n  const { eng, jpn } = title;\n  const shortDesc = description\n    ? `${description.split(' ').slice(0, 10).join(' ')}...`\n    : 'No Description!';\n  return (\n    <StyledAnimeCard>\n      <div className=\"img-wrapper\">\n        <img src={image} alt={`${eng}_image`} />\n      </div>\n      <h4>{eng ? `${eng}` : 'No title found!'}</h4>\n      <h4>{jpn}</h4>\n      <p>{shortDesc}</p>\n      <div className=\"btns\">\n        <Link to={`/anime/${id}`}>Read more</Link>\n        <button type=\"button\" onClick={toggleStar}>\n          <i className={isStarred ? 'fas fa-star yellow' : 'far fa-star'}> </i>\n        </button>\n      </div>\n    </StyledAnimeCard>\n  );\n};\n\nexport default AnimeCard;\n","import { useReducer, useEffect, useState } from 'react';\n\nfunction stateReducer(prevState, action) {\n  switch (action.type) {\n    case 'ADD': {\n      return [...prevState, { data: action.resourceID, type: action.val }];\n    }\n    case 'REMOVE': {\n      return prevState.filter(({ data }) => {\n        return data !== action.resourceID;\n      });\n    }\n\n    default: {\n      return prevState;\n    }\n  }\n}\n\nfunction usePersistedReducer(reducer, initialState, key) {\n  const [state, dispatch] = useReducer(reducer, initialState, initial => {\n    const stored = localStorage.getItem(key);\n    return stored ? JSON.parse(stored) : initial;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [state, key]);\n\n  return [state, dispatch];\n}\n\nexport function useStarred(key = 'starred') {\n  return usePersistedReducer(stateReducer, [], key);\n}\n\nexport function usePersistedQuery(key = 'lastInput') {\n  const [input, setInput] = useState(() => {\n    const lastInput = sessionStorage.getItem(key);\n\n    return lastInput ? JSON.parse(lastInput) : '';\n  });\n\n  const setPersistedInput = newInput => {\n    setInput(newInput);\n    sessionStorage.setItem(key, JSON.stringify(newInput));\n  };\n  return [input, setPersistedInput];\n}\n","import React from 'react';\nimport AnimeCard from './AnimeCard';\nimport { FlexGrid } from '../Styled';\nimport { useStarred } from '../../custom-hooks';\n\nconst AnimeGrid = ({ data }) => {\n  const [starredShows, dispatchStarred] = useStarred();\n\n  return (\n    <FlexGrid>\n      {data.map(item => {\n        const isStarred = starredShows.find(element => {\n          return element.data === item.id;\n        });\n        const toggleStar = () => {\n          if (isStarred) {\n            dispatchStarred({ type: 'REMOVE', resourceID: item.id });\n          } else {\n            dispatchStarred({ type: 'ADD', resourceID: item.id, val: 'anime' });\n          }\n        };\n        return (\n          <AnimeCard\n            key={item.id}\n            toggleStar={toggleStar}\n            title={{\n              eng: item.attributes.titles.en_jp,\n              jpn: item.attributes.titles.ja_jp,\n            }}\n            id={item.id}\n            isStarred={isStarred}\n            description={item.attributes.description}\n            image={item.attributes.posterImage.small}\n          />\n        );\n      })}\n    </FlexGrid>\n  );\n};\n\nexport default AnimeGrid;\n","import styled from 'styled-components';\nimport { SearchCard } from '../Styled';\n\n// a demonstration of extending styles of a styled component\nexport const StyledMangaCard = styled(SearchCard)`\n  .btns {\n    margin-top: 15px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    a {\n      text-decoration-color: #000;\n      color: #000;\n      &:hover {\n        text-decoration-color: blue;\n        color: blue;\n      }\n    }\n    button {\n      outline: none;\n      border: 1px solid #8e8e8e;\n      border-radius: 15px;\n      padding: 5px 20px;\n      background-color: #fff;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      &:hover {\n        cursor: pointer;\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { StyledMangaCard } from './MangaCard.styled';\n\nconst MangaCard = ({\n  title,\n  image,\n  id,\n  description,\n  toggleStar,\n  isStarred,\n}) => {\n  const { eng, jpn } = title;\n  const shortDesc = description\n    ? `${description.split(' ').slice(0, 10).join(' ')}...`\n    : 'No Description!';\n  return (\n    <StyledMangaCard>\n      <div className=\"img-wrapper\">\n        <img src={image} alt={`${eng}_image`} />\n      </div>\n      <h4>{eng ? `${eng}` : 'No title found!'}</h4>\n      <h4>{jpn}</h4>\n      <p>{shortDesc}</p>\n      <div className=\"btns\">\n        <Link to={`/manga/${id}`}>Read more</Link>\n        <button type=\"button\" onClick={toggleStar}>\n          <i className={isStarred ? 'fas fa-star yellow' : 'far fa-star'}> </i>\n        </button>\n      </div>\n    </StyledMangaCard>\n  );\n};\n\nexport default MangaCard;\n","import React from 'react';\nimport MangaCard from './MangaCard';\nimport { FlexGrid } from '../Styled';\nimport { useStarred } from '../../custom-hooks';\n\nconst MangaGrid = ({ data }) => {\n  const [starredShows, dispatchStarred] = useStarred();\n\n  return (\n    <FlexGrid>\n      {data.map(({ id, attributes }) => {\n        const isStarred = starredShows.find(element => {\n          return element.data === id;\n        });\n        const toggleStar = () => {\n          if (isStarred) {\n            dispatchStarred({ type: 'REMOVE', resourceID: id });\n          } else {\n            dispatchStarred({ type: 'ADD', resourceID: id, val: 'manga' });\n          }\n        };\n        return (\n          <MangaCard\n            key={id}\n            title={{\n              eng: attributes.titles.en_jp,\n              jpn: attributes.titles.ja_jp,\n            }}\n            id={id}\n            isStarred={isStarred}\n            description={attributes.description}\n            image={attributes.posterImage.small}\n            toggleStar={toggleStar}\n          />\n        );\n      })}\n    </FlexGrid>\n  );\n};\n\nexport default MangaGrid;\n","const API_BASE_URL = 'https://kitsu.io/api/edge/';\n\nexport const getApiResult = async queryString => {\n  const response = await fetch(`${API_BASE_URL}${queryString}`).then(res => {\n    return res.json();\n  });\n  return response;\n};\n","import React, { useState } from 'react';\nimport MainPageLayout from '../components/MainPageLayout';\nimport AnimeGrid from '../components/anime/AnimeGrid';\nimport MangaGrid from '../components/manga/MangaGrid';\nimport { getApiResult } from '../config';\nimport { usePersistedQuery } from '../custom-hooks';\n\nconst Home = () => {\n  const [input, setInput] = usePersistedQuery();\n  const [results, setResults] = useState(null);\n  const [srchOpt, setSrchOpt] = useState('anime');\n\n  const isAnimeOpted = srchOpt === 'anime';\n\n  const search = () => {\n    getApiResult(`${srchOpt}?filter[text]=${input}`).then(result => {\n      setResults(result.data);\n      // console.log(result.data);\n    });\n  };\n\n  const keyPress = ev => {\n    if (ev.keyCode === 13) {\n      search();\n    }\n  };\n  const inputChange = ev => {\n    setInput(ev.target.value);\n  };\n\n  const radioChange = ev => {\n    setSrchOpt(ev.target.value);\n  };\n\n  const renderResult = () => {\n    if (results && results.length === 0) {\n      return <div>No Results</div>;\n    }\n    if (results && results.length > 0) {\n      return srchOpt === 'anime' ? (\n        <AnimeGrid data={results} />\n      ) : (\n        <MangaGrid data={results} />\n      );\n    }\n    return null;\n  };\n\n  return (\n    <MainPageLayout>\n      <input\n        className=\"search\"\n        type=\"text\"\n        placeholder=\"Enter here to search\"\n        onChange={inputChange}\n        value={input}\n        onKeyDown={keyPress}\n      />\n      <div className=\"radio\">\n        <label htmlFor=\"anime\">\n          Anime\n          <input\n            type=\"radio\"\n            id=\"anime\"\n            value=\"anime\"\n            onChange={radioChange}\n            checked={isAnimeOpted}\n          />\n        </label>\n        <label htmlFor=\"manga\">\n          Manga\n          <input\n            type=\"radio\"\n            id=\"manga\"\n            value=\"manga\"\n            onChange={radioChange}\n            checked={!isAnimeOpted}\n          />\n        </label>\n      </div>\n      <div className=\"btn-wrapper\">\n        <button type=\"button\" onClick={search}>\n          Search\n        </button>\n      </div>\n\n      {renderResult()}\n      <footer>\n        An anime disovering website powered by <i>&copy;Kitsu</i>, handcrafted\n        by Str4nge\n      </footer>\n    </MainPageLayout>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport MainPageLayout from '../components/MainPageLayout';\nimport { useStarred } from '../custom-hooks';\nimport { getApiResult } from '../config';\nimport AnimeGrid from '../components/anime/AnimeGrid';\n\nconst Starred = () => {\n  const [starred] = useStarred();\n  const [starredList, setStarredList] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (starred && starred.length > 0) {\n      const promises = starred.map(({ data, type }) => {\n        return getApiResult(`${type}/${data}`);\n      });\n\n      Promise.all(promises)\n        .then(apidata =>\n          apidata.map(spread => {\n            return spread.data;\n          })\n        )\n        .then(results => {\n          setStarredList(results);\n          // console.log(results);\n          setIsLoading(false);\n        })\n        .catch(err => {\n          setIsLoading(false);\n          setError(err);\n        });\n    } else {\n      setIsLoading(false);\n    }\n  }, [starred]);\n\n  return (\n    <MainPageLayout>\n      {isLoading && <div>Data is Loading...</div>}\n      {error && <div>Error Occured</div>}\n      {!isLoading && !starredList && <div>No Starred shows</div>}\n      {!isLoading && starredList && <AnimeGrid data={starredList} />}\n    </MainPageLayout>\n  );\n};\n\nexport default Starred;\n","import React from 'react';\n\nconst ErrorPage = () => {\n  return (\n    <div>\n      Error 404! <br />\n      OOPS Page you are looking for does not exist.\n    </div>\n  );\n};\nexport default ErrorPage;\n","import styled from 'styled-components';\n\nexport const MainDataWrapper = styled.div`\n  display: flex;\n  margin-bottom: 40px;\n\n  img {\n    min-width: 220px;\n    width: 275px;\n    max-height: 330px;\n    border: 1px solid #ddd;\n    border-radius: 10px;\n  }\n\n  .text-side {\n    margin-left: 30px;\n    .summary {\n      color: #5f5f5f;\n      line-height: 1.5;\n    }\n  }\n\n  @media only screen and (max-width: 768px) {\n    flex-wrap: wrap;\n    img {\n      margin-bottom: 20px;\n      margin: auto;\n    }\n    .text-side {\n      margin-left: 0;\n      margin-top: 20px;\n    }\n  }\n`;\n\nexport const Headline = styled.div`\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n\n  h2 {\n    margin: 0;\n    border-right: 1px solid #ddd;\n    padding-right: 25px;\n    margin-right: 20px;\n  }\n\n  div {\n    display: flex;\n    align-items: center;\n    span {\n      margin-left: 10px;\n    }\n  }\n`;\n","import React from 'react';\nimport { Headline, MainDataWrapper } from './MainData.styled';\n\nconst MainData = ({ title, description, image }) => {\n  return (\n    <MainDataWrapper>\n      <img src={image} alt=\"show-cover\" />\n      <div className=\"text-side\">\n        <Headline>\n          <h2>{title.eng}</h2>\n          <span>{title.jpn}</span>\n        </Headline>\n\n        <div className=\"summary\">\n          <p>{description}</p>\n        </div>\n      </div>\n    </MainDataWrapper>\n  );\n};\n\nexport default MainData;\n","import styled from 'styled-components';\n\nexport const DetailsWrapper = styled.div`\n  p {\n    margin: 5px 0;\n\n    span {\n      font-weight: bold;\n    }\n  }\n`;\nexport const TagList = styled.div`\n  display: inline-flex;\n  flex-wrap: wrap;\n\n  span {\n    margin: 6px;\n    margin-bottom: 0;\n    color: blue;\n    background-color: #d0c9ff;\n    padding: 3px 13px;\n    border-radius: 20px;\n    font-size: 14px;\n  }\n`;\n","/* eslint-disable no-unneeded-ternary */\nimport React, { useState, useEffect } from 'react';\nimport { getApiResult } from '../config';\nimport { DetailsWrapper, TagList } from './StyledDetail';\n\nconst BASE_URL = 'https://kitsu.io';\n\nconst Details = ({ id, rating, count, status, genreString, ctg }) => {\n  const [genre, setGenre] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    getApiResult(genreString).then(res => {\n      if (isMounted) {\n        setGenre(res.data);\n      }\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [genreString]);\n\n  return (\n    <DetailsWrapper>\n      <p>Average rating: {rating}</p>\n      <div>\n        <p>\n          Status: <span>{status}</span>\n        </p>\n        <p>\n          Total {ctg === 'anime' ? 'Episodes' : 'Volume'}: {count}\n        </p>\n      </div>\n      <div>\n        Tags:\n        <TagList>\n          {genre &&\n            genre.map(item => (\n              <span key={item.id}>{item.attributes.name}</span>\n            ))}\n        </TagList>\n      </div>\n      checkout what others think{' '}\n      <a href={`${BASE_URL}/${ctg}/${id}`} rel=\"noreferrer\" target=\"_blank\">\n        here\n      </a>\n    </DetailsWrapper>\n  );\n};\n\nexport default Details;\n","import styled from 'styled-components';\n\nexport const ShowPageWrapper = styled.div`\n  padding: 0 20px;\n\n  @media only screen and (min-width: 516px) {\n    padding: 0 40px;\n  }\n\n  @media only screen and (min-width: 768px) {\n    padding: 0 60px;\n  }\n\n  @media only screen and (min-width: 992px) {\n    padding: 0 80px;\n  }\n`;\n\nexport const InfoBlock = styled.div`\n  margin-bottom: 40px;\n  h2 {\n    margin: 0;\n    margin-bottom: 30px;\n    font-size: 22px;\n  }\n`;\n","import React, { useReducer, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getApiResult } from '../config';\nimport MainData from '../components/MainData';\nimport Details from '../components/Details';\nimport { InfoBlock, ShowPageWrapper } from './Details.styled';\n\nconst reducer = (prevState, action) => {\n  switch (action.type) {\n    case 'FETCH-SUCCESS': {\n      return { details: action.details, isLoading: false, error: null };\n    }\n    case 'FETCH-FAILED': {\n      return { ...prevState, isLoading: false, error: action.error };\n    }\n    default: {\n      return prevState;\n    }\n  }\n};\nconst initialState = {\n  details: null,\n  isLoading: true,\n  error: null,\n};\n\nconst AnimeDetail = ({ category }) => {\n  const params = useParams();\n  const [{ details, isLoading, error }, dispatch] = useReducer(\n    reducer,\n    initialState\n  );\n\n  useEffect(() => {\n    let isMounted = true;\n\n    getApiResult(`/${category}/${params.id}`)\n      .then(res => {\n        if (isMounted) {\n          dispatch({ type: 'FETCH-SUCCESS', details: res });\n        }\n      })\n      .catch(err => {\n        dispatch({ type: 'FETCH-FAILED', error: err.message });\n      });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [params.id, category]);\n\n  // console.log(details);\n\n  if (isLoading) {\n    return <div>Data is Loading...</div>;\n  }\n  if (error) {\n    return <div>Error Occurred: {error}</div>;\n  }\n\n  const data = details.data.attributes;\n  // console.log(data);\n  const ctg = details.data.type;\n\n  return (\n    <ShowPageWrapper>\n      <MainData\n        image={data.posterImage.small}\n        title={{ eng: data.titles.en_jp, jpn: data.titles.ja_jp }}\n        description={data.description}\n      />\n      <InfoBlock>\n        <h2>Details</h2>\n        <Details\n          id={params.id}\n          rating={data.averageRating}\n          ctg={ctg}\n          count={ctg === 'anime' ? data.episodeCount : data.volumeCount}\n          status={data.status}\n          genreString={`${category}/${params.id}/genres`}\n        />\n      </InfoBlock>\n      <footer>\n        An anime disovering website powered by <i>&copy;Kitsu</i>, handcrafted\n        by Str4nge\n      </footer>\n    </ShowPageWrapper>\n  );\n};\n\nexport default AnimeDetail;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Starred from './pages/Starred';\nimport ErrorPage from './pages/ErrorPage';\nimport ResourceDetail from './pages/ResourceDetail';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n      <Route exact path=\"/starred\">\n        <Starred />\n      </Route>\n      <Route exact path=\"/anime/:id\">\n        <ResourceDetail category=\"anime\" />\n      </Route>\n      <Route exact path=\"/manga/:id\">\n        <ResourceDetail category=\"manga\" />\n      </Route>\n      <Route>\n        <ErrorPage />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}